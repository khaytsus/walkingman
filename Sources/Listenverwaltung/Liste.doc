JPK12.04.92-13.04.92

Import:
	LISTE_INHALT:
		als Definition erstellte Textsequenz von Variablendefinitionen, die
		roh in die Struktur der Listenelemente eingefügt wird. Muß nicht
		zwingend definiert sein.
Export:
	LISTE_DUMMY:
		wird bei statischen Variableninitialisierungen an die Stelle gesetzt,
		an der der Listenverkettungskopf steht.
	struct Liste:
		Typ, der den Schlüssel zu einer Liste darstellt.
	struct Liste_Element:
		Typ, der die Listenverkettung sowie (bei Definition von LISTE_INHALT)
		alle weiteren Daten eines Listenelements enthält.


Funktionen:

Liste_Init:
	-ist vor dem ersten Benutzen des Moduls aufzurufen.
	-keine Parameter.
	-kein Rückgabewert.

Liste_Clear:
	-ist nach dem letzten Benutzen des Moduls aufzurufen.
	-keine Parameter.
	-kein Rückgabewert.

Liste_Neu/Liste_C_Neu:
	-richtet eine neue, leere Liste ein.
	-Parameter (a0.l/struct Liste *): Adresse der einzurichtenden Liste.
	-kein Rückgabewert.

Liste_Alt/Liste_C_Alt:
	-löscht sämtliche Einträge einer Liste.
	-Parameter
		(a0.l/struct Liste *): Adresse der zu löschenden Liste.
		(a1.l/void *()):  Funktion, die für jeden einzelnen, bereits
			ausgefügten Eintrag aufgerufen wird.  Ein Nullpointer wird nicht
			aufgerufen. Die Adresse des Eintrags wird in a1 und als erster
			Parameter (Stackoffset 4) übergeben.
		(d0.l/long):  Wert, der zusätzlich in d0 und als zweiter
			Stackparameter (Stackoffset 8) übergeben wird, falls eine Funktion
			aufgerufen wird.
		Die Funktion verändert außerdem a6 nicht ausdrücklich.
		Dadurch kann durch Voreinstellung von a6=ExecBase, a1=FreeMem(a6) und
			d0=die Größe der Einträge eine Liste vollständig aus dem Speicher
			entfernt werden.
	-kein Rückgabewert.

Liste_Ausfuegen/Liste_C_Ausfuegen:
	-entfernt ein Element aus der Liste.
	-Parameter
		(a0.l/struct Liste *): Adresse der zu kürzenden Liste.
		(a1.l/struct Eintrag *): Adresse des zu entfernenden Elements.
	-Ergebnis (struct Eintrag *): Das entfernte Element.

Liste_Nachfuegen/Liste_C_Nachfuegen:
	-fügt ein Element hinter einem anderen in die Liste ein.
	-Parameter
		(a2.l/struct Liste *): Adresse der zu erweiternden Liste.
		(a0.l/struct Eintrag *): Adresse des neuen Elements.
		(a1.l/struct Eintrag *): Adresse des Elements, hinter dem eingefügt
			werden soll.  Soll am Beginn der Liste eingefügt werden, muß der
			Listenkopf angegeben werden.
	-Ergebnis (struct Eintrag *): Das eingefügte Element.

Liste_Vorfuegen/Liste_C_Vorfuegen:
	-fügt ein Element vor einem anderen in die Liste ein; entspricht
		ansonsten Liste_Nachfuegen/Liste_C_Nachfuegen.

Liste_Erstes/Liste_C_Erstes:
	-prüft, ob dies das erste Element einer Liste ist.
	-Parameter
		(a0.l/struct Liste *): Adresse der Liste.
		(a2.l/struct Eintrag *): Adresse des zu prüfenden Elements.
	-Ergebnis (byte):
		0/1 für nein/ja, das equal-Flag ist entsprechend gesetzt.

Liste_Letztes/Liste_C_Letztes:
	-entsprechend Liste_Erstes/Liste_C_Erstes.

Liste_Leer/Liste_C_Leer:
	-prüft, ob die Liste leer ist.
	-Parameter (a0.l/struct Liste *): Adresse der zu prüfenden Liste.
	-Ergebnis (byte):
		0/1 für nein/ja, das equal-Flag ist entsprechend gesetzt.

Liste_Stop/Liste_C_Stop:
	-prüft, ob über die Listengrenzen hinaus gelesen wurde.
	-Parameter
		(a0.l/struct Liste *): Adresse der zu prüfenden Liste.
		(a1.l/struct Liste_Eintrag *): zu untersuchendes Element.
	-Ergebnis (byte): 1 falls das dem letzten Element folgende oder das dem
		ersten Element vorangehende Element übergeben wurde.

Liste_Sohn/Liste_C_Sohn:
	-liefert das nachfolgende Element.
	-Parameter
		(a0.l/struct Liste *): Liste, in der gesucht wird.
		(a1.l/struct Eintrag *): Element, dessen Nachfolger gesucht wird.
			Soll auf das erste Element zugegriffen werden, muß die Adresse des
			Listenkopfes übergeben werden.
	-Ergebnis (struct Eintrag *):	
		Das nachfolgende Element. War das angegebene Element das letzte der
		Liste, wird der Listenkopf zurückgegeben.

Liste_Vater/Liste_C_Vater:
	-liefert entsprechend Liste_Sohn/Liste_C_Sohn das vorangehende Element.

